import time
import pygame as pg

class Sprite():
    instances = []
    def __init__(self, x, y, animroot, windowobject):
        Sprite.instances.append(self)
        self.x = x
        self.y = y
        self.a = animroot
        self.windowobject = windowobject
    
    def load(self, anim:str):
        pic = "animations/" + self.a + "/" + anim + ".png"
        img = pg.image.load(pic)
        return img

class Item():
    def __init__(self, name, x=0, y=0):
        self.name = name
        self.x = x
        self.y = y
    
    def get_name(self):
        return self.name

class Goober(Sprite):
    def __init__(self, x, y, animroot, windowobject):
        super().__init__(x, y, animroot, windowobject)
        self.is_busy = False
        self.equipped_item = None
        self.frame = "idle-0"
        self.animation_index = 0
        self.idle = ["idle-0","idle-0","idle-1","idle-1"]
        self.walk = ["walk-0","walk-1","walk-2","walk-3","walk-4","walk-5","walk-6","walk-7"]
        self.hit = ["hit-0","hit-1","hit-2","hit-3"]
        self.current_animation = self.idle
    def equip(self, item):
        self.equipped_item = item
    def tick_animation(self):
        if self.is_busy == False:
            if self.animation_index > len(self.current_animation)-1:
                self.animation_index = 0
            self.frame = self.current_animation[self.animation_index]
            self.animation_index += 1
        else:
            if self.animation_index > len(self.current_animation)-1:
                self.animation_index = 0
                self.is_busy = False
            else:
                self.frame = self.current_animation[self.animation_index]
                self.animation_index += 1
    def set_state(self, state="idle"):
        match state:
            case "idle": self.current_animation = self.idle
            case "walk": self.current_animation = self.walk
            case "hit":
                self.current_animation = self.hit
                self.animation_index = 0
                self.is_busy = True
            case _: return ValueError
    def is_sprite_busy(self):
        return self.is_busy
    def draw(self, x=28, y=28, flip_x=False, flip_y=False):
        img = self.load(self.frame)
        if flip_x != False or flip_y != False:
            img = pg.transform.flip(img,flip_x,flip_y)
        if x != 28 and y != 28:
            img = pg.transform.scale(img,(x,y))
        rect = img.get_rect()
        rect.center = self.x, self.y
        self.windowobject.blit(img, rect)
        if self.equipped_item != None:
            mod = x/28
            img_item = self.load(self.equipped_item.get_name())
            if self.current_animation == self.hit:
                if flip_x == False:
                    if self.frame #WIP
                    self.equipped_item.x = self.x-27
                    self.equipped_item.y = self.y-25
                else:
                    self.equipped_item.x = self.x-27
                    self.equipped_item.y = self.y+14
                
                if x != 28 and y != 28:
                    img_item = pg.transform.scale(img_item,(x/1.5,y/1.5))
            else:
                if flip_x == False:
                    self.equipped_item.x = self.x+9*mod
                    self.equipped_item.y = self.y+4.6*mod
                else:
                    self.equipped_item.x = self.x-9*mod
                    self.equipped_item.y = self.y+4.6*mod

                if flip_x != False or flip_y != False:
                    img_item = pg.transform.flip(img_item,flip_x,flip_y)
                if x != 28 and y != 28:
                    img_item = pg.transform.scale(img_item,(x/1.5,y/1.5))
                if flip_x == False:
                    img_item = pg.transform.rotate(img_item,-105)
                else:
                    img_item = pg.transform.rotate(img_item,105)
            rect_item = img_item.get_rect()
            rect_item.center = self.equipped_item.x, self.equipped_item.y
            self.windowobject.blit(img_item, rect_item)
            

        